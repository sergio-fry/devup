require "yaml"

require "devup/logger"
require "devup/compose"
require "devup/service"
require "devup/service_presenter"
require "devup/port_checker"
require "devup/shell"

module Devup
  class Environment
    attr_reader :pwd, :logger, :port_checker, :shell

    def initialize(pwd:, compose: nil, logger: Logger.build, port_checker: PortChecker.new, shell: Shell.new(pwd: pwd, logger: logger))
      @pwd = pwd.to_s.strip
      @compose = compose
      @logger = logger
      @port_checker = port_checker
      @shell = shell
    end

    def project
      pwd.split("/")[-1].strip
    end

    def env
      services.map { |s| service_env(s) }.join("\n\n")
    end

    def up
      logger.info "starting up..."
      check
      compose.up
      wait_services
      write_dotenv
      logger.info "up"
    rescue
      clear_dotenv
      logger.info "halted"
    end

    def down
      logger.info "shutting down..."
      compose.stop
      compose.rm
      clear_dotenv
      logger.info "down"
    rescue
      logger.info "halted"
    end

    def root
      Pathname.new pwd
    end

    private

    def wait_services
      services.each { |service| wait_service(service) }
    end

    def wait_service(service)
      service.ports.each { |port| wait_port(service, port) }
    end

    PORT_TIMEOUT = 5
    PORT_WAIT_TIME = 1

    def wait_port(service, port)
      Timeout.timeout(PORT_TIMEOUT) do
        loop do
          logger.debug "wait #{service.name} port #{port.from}"

          if port_checker.call(port.to)
            logger.debug "connected to #{port.from}"
            break
          else
            logger.debug "failed to connect #{port.from}"
          end

          sleep PORT_WAIT_TIME
        end
      end
    rescue Timeout::Error
      logger.error "failed to connect #{port.from}"
      raise
    end

    def check
      raise if missing_config
      compose.check
    end

    def missing_config
      if File.exist?(compose.path)
        false
      else
        logger.error "missing #{compose.path}"

        true
      end
    end

    def services
      @services ||= compose.services.map { |name| Service.new(compose, name) }
    end

    def service_env(service)
      ServicePresenter.new(service, project: project).call
    end

    def write_dotenv
      File.open(root.join(".env.services"), "w") { |f| f.write dotenv }
    end

    def clear_dotenv
      File.open(root.join(".env.services"), "w") { |f| f.write "" }
    end

    def dotenv
      <<~DOTENV
        ####################################################
        #     This file is generated by devup command.     #
        #     Home: https://github.com/sergio-fry/devup    #
        ####################################################
        # START

        #{env}

        # END

      DOTENV
    end

    def compose
      @compose ||= begin
                     Compose.new(
                       root.join("docker-compose.devup.yml"),
                       project: project, logger: logger, shell: shell
                     )
                   end
    end
  end
end
